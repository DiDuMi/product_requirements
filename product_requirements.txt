# 产品文档：Coser社群Bot

## 1. 产品概述
Coser社群Bot是一个专为Telegram社群设计的自动化管理工具，旨在提高社群运营效率并提升用户体验。Bot提供积分管理、签到系统、邮箱绑定、付费群组管理、积分商城等多项功能，同时支持多语言交互和按钮交互，帮助管理员和用户轻松进行操作。

## 2. 核心功能

### 2.1 每日签到与积分奖励
- **功能描述**：用户每天可以在付费权益群里发送"签到"、"打卡"消息，系统会记录并给用户增加积分。
- **规则**： 
  - 每天签到获得10积分。
  - 累计签到超过7天奖励20积分，30天奖励100积分。
- 新增规则：
  - 中国传统节假日签到双倍积分签到双倍积分
  - 每日签到时间限制（UTC+8 00:00-23:59）
  - 连续签到中断后的重置机制

### 2.2 积分互赠与冻结机制
- **功能描述**：成员之间可以将自己的积分余额互赠给其他成员。
- **赠送方式**：
  1. 通过用户名赠送：
     - `/zs @username 数量 [理由]`
     例如：`/zs @user 100 感谢分享攻略`
  2. 通过回复消息赠送：
     - 回复消息并发送 `/zs 数量 [理由]`
     例如：`/zs 50 感谢帮忙解答`
- **赠送规则**：
  - Bot会验证发送者和接收者身份
  - 回复消息赠送时，消息发送时间不能超过24小时
  - 禁止自我赠送积分
- **冻结规则**：
  - 新到账的积分冻结三天（管理员可以修改冻结时长）。
  - 管理员可以撤销积分互赠并冻结成员积分数量和时间。
- **操作流程**：
  1. 用户发送赠送指令（任一方式）
  2. Bot验证可用积分（需扣除冻结中的积分）
  3. 生成待签收交易：
     ```
     新积分赠送！
     - 赠送者：[用户信息]
     - 接收者：[用户信息]
     - 数量：XXX积分
     - 赠送理由：[用户填写的理由]
     - 交易ID：XXXXXX
     - 签收期限：24小时
     
     请在24小时内完成签收，逾期将自动退回
     [签收] [拒绝]
     ```
  4. 签收提醒：
     - 12小时未签收：Bot发送提醒消息
     ```
     签收提醒
     您收到来自 [用户信息] 的积分赠送尚未处理
     - 数量：XXX积分
     - 理由：[赠送理由]
     - 剩余签收时间：XX小时
     请及时处理，避免积分自动退回
     [签收] [拒绝]
     ```
  5. 交易完成通知：
     ```
     交易已完成！
     - 状态：[已签收/已拒绝/已超时]
     - 赠送者：[用户信息]
     - 接收者：[用户信息]
     - 数量：XXX积分
     - 赠送理由：[用户填写的理由]
     - 交易ID：XXXXXX
     - 完成时间：YYYY-MM-DD HH:mm:ss
     ```

- **签收规则**：
  - 签收期限：24小时内有效
  - 签收方式：点击Bot消息中的[签收]按钮
  - 可选操作：[签收] [拒绝]
  - 超时处理：自动退回并通知双方

- **特殊情况**：
  - 赠送方撤销：交易完成前可随时撤销
  - 接收方离群：未签收积分自动退回
  - 账号异常：暂停签收资格，等待人工审核

### 2.3 积分商城
- **功能描述**：用户可以使用积分兑换虚拟商品或服务。
- **商品种类**：
  - 用户权益：会员权限、特定群组或频道的访问权限等。
  - 群组权益：积分群组、专享福利等（需要注意bot对付费权益群组和频道的管理）。
  - 虚拟商品：网站链接、卡密等。
- **管理功能**：
  - 管理员可调整商品的兑换积分要求、管理商品库存。
- 新增兑换流程：
  用户选择商品 → 验证积分余额 → 生成兑换码 → 扣除积分
- 补充异常处理：
  - 商品下架机制
  - 兑换码有效期设置
  - 失败交易自动回滚

### 2.4 排行榜功能
- **功能描述**：展示社群内用户的积分相关排名。
- **排行榜类别**：
  - 累积签到排行榜
  - 收受积分排行榜
  - 赠送积分排行榜

### 2.5 邮箱绑定与权益恢复
- **功能描述**：用户绑定邮箱后，可以在Telegram账号被封禁时，通过新账号邮箱验证，申请恢复其付费权益。
- **绑定条件**：
  - 账户积分余额≥500分
  - 注册时间超过7天
  - 无违规记录
- **绑定限制**：
  - 每个邮箱仅可绑定1个账号
  - 同一账号30天内仅可更换邮箱1次
  - 邮箱验证码5分钟内有效，每日最多发送3次
- **权益找回操作流程**：
  1. 账号被封后操作：
     - 用户使用新Telegram账号联系Bot
     - Bot引导用户进入邮箱验证流程
  
  2. 邮箱验证步骤：
     - 用户输入原绑定邮箱地址
     - Bot发送验证码至邮箱
     - 用户输入验证码完成验证
  
  3. 信息核实：
     - Bot展示用户基本信息：
       * 免费群组/频道
       * 付费群组/频道
       * 当前绑定账号
       * 积分余额
  
  4. 权益转移：
     - 用户确认信息无误后申请转移
     - 提交管理员审核
     - 审核通过：Bot生成新邀请链接，恢复权益
     - 审核未通过：Bot发送失败原因

### 2.6 按钮交互
- **功能描述**：通过按钮交互，提升用户操作的效率与体验。
- **使用场景**：
  - 签到按钮：用户点击签到按钮即可自动签到并获得积分。
  - 邮箱绑定按钮：用户点击按钮开始邮箱绑定流程。
  - 积分商城按钮：用户选择兑换商品，直接通过按钮进行操作。
- 新增按钮类型：
  - 积分流水查询
  - 交易记录导出
  - 客服联系通道

### 2.7 多语言支持
- **功能描述**：Bot支持多语言交互，自动根据用户语言进行切换。
- **实现方式**：
  - 支持中文、英文、日语等多种语言。
  - 管理员可通过后台调整Bot默认语言，并增加新的语言包。
  - 用户可以通过发送/lang命令切换Bot语言。
- **语言包示例**：
  ```json
  {
    "zh_CN": {
      "checkin_success": "签到成功！获得 {points} 积分",
      "points_not_enough": "积分不足，当前积分：{current}，需要积分：{required}",
      "exchange_success": "兑换成功！商品：{product_name}"
    },
    "en_US": {
      "checkin_success": "Check-in success! Got {points} points",
      "points_not_enough": "Insufficient points. Current: {current}, Required: {required}",
      "exchange_success": "Exchange success! Product: {product_name}"
    }
  }
  ```

### 2.8 添加和取消付费群组/频道
- **功能描述**：管理员可以管理用户的付费群组/频道权限。
- **操作逻辑**：
  - 添加：当用户完成付款或满足条件时，管理员可以将用户添加至付费群组。
  - 取消：当用户取消付费或退出时，管理员可以撤销用户的访问权限。

### 2.8.1 群组/频道分类与设置
- **免费群组/频道**：
  1. 设置方式：
     - 管理员使用命令 `/setfree <群组ID/频道ID>` 将群组/频道设为免费
     - Bot自动生成公开邀请链接
  2. 访问权限：
     - 所有用户可通过公开链接直接加入
     - Bot自动欢迎新成员并介绍基本规则
  3. 权限限制：
     - 可设置新用户禁言时间（默认24小时）
     - 可开启防刷屏功能

- **付费群组/频道**：
  1. 设置方式：
     - 管理员使用命令 `/setpaid <群组ID/频道ID> <积分要求>` 设置付费群组
     - Bot生成专属邀请链接，仅对满足条件用户有效
  2. 访问条件：
     - 积分达标：用户积分满足要求
     - 付费购买：通过积分商城兑换入群资格
     - 特殊邀请：管理员手动邀请
  3. 权限管理：
     - 自动清理过期用户
     - 定期检查用户资格
     - 违规用户自动移除

### 2.8.2 群组/频道权限配置
- **管理员命令**：
  ```
  /addgroup <群组ID> - 添加新群组
  /delgroup <群组ID> - 删除群组
  /settype <群组ID> <类型> - 设置群组类型(free/paid)
  /setpoints <群组ID> <积分> - 设置所需积分
  /settime <群组ID> <天数> - 设置有效期
  ```

- **权限检查流程**：
  1. 用户申请加入
  2. Bot检查用户资格：
     - 积分余额
     - 账号状态
     - 违规记录
  3. 满足条件：
     - 生成临时邀请链接
     - 发送给用户
  4. 不满足条件：
     - 提示不满足条件
     - 显示获取资格方式

- **自动化管理**：
  1. 定时任务：
     - 每日检查用户有效期
     - 提前3天提醒即将到期
     - 到期自动移除
  2. 违规处理：
     - 记录违规行为
     - 达到阈值自动移除
     - 通知管理员处理

### 2.8.3 用户权限变更通知
- **加入成功通知**：
  ```
  恭喜您成功加入 [群组名称]
  权限类型：付费群组
  有效期至：YYYY-MM-DD
  剩余积分：XXX
  ```

- **即将到期提醒**：
  ```
  您的 [群组名称] 权限即将于 YYYY-MM-DD 到期
  请及时续费以保持权限
  续费方式：
  1. 积分商城兑换
  2. 联系管理员
  ```

- **违规警告通知**：
  ```
  您在 [群组名称] 中存在违规行为
  违规类型：XXX
  警告次数：X/3
  累计3次将自动移除群组
  ```

### 2.8.4 老成员权益识别与迁移
- **功能描述**：对已存在的群组/频道成员进行权益识别和迁移。

- **老成员识别方式**：
  1. 批量导入：
     - 管理员提供老成员名单（CSV格式）
     - 包含字段：用户ID/用户名、加入时间、权益类型、到期时间
     - Bot批量导入并建立成员档案
  
  2. 手动认证：
     - 老成员主动联系Bot
     - 提供购买记录或历史截图
     - 管理员人工审核确认

- **权益迁移流程**：
  1. 群组/频道接入Bot后：
     ```
     【群组公告】
     本群组已接入Bot管理系统
     请老成员在7天内完成权益认证
     认证方式：
     1. 私聊 @didumibot
     2. 提供历史购买凭证
     3. 等待管理员审核
     认证后可获得：
     - 原有权益保留
     - 额外赠送50积分
     - VIP成员标识
     ```
  
  2. 认证流程：
     - 用户私聊 @didumibot
     - Bot引导提供认证信息
     - 管理员审核确认
     - 确认后自动记录用户权益

- **特殊处理**：
  1. 无记录用户：
     - 给予30天临时权益
     - 30天内需完成认证
     - 否则视为新用户

  2. 付费到期用户：
     - 记录原付费时长
     - 可享受老用户续费优惠
     - 保留历史贡献度

  3. 永久会员：
     - 验证永久会员凭证
     - 标记特殊权益
     - 赠送专属徽章

- **权益记录**：
  ```
  用户权益档案
  - 用户ID：XXXXXXXX
  - 加入时间：YYYY-MM-DD
  - 权益类型：[永久/包年/包月]
  - 认证状态：[已认证/待认证]
  - 特殊标记：[老成员/VIP/永久会员]
  - 历史贡献：XXX积分
  ```

- **管理员工具**：
  ```
  /olduser <用户ID> <类型> - 标记老成员
  /setright <用户ID> <权益> - 设置权益
  /addtime <用户ID> <天数> - 增加有效期
  /vipmark <用户ID> <标记> - 设置特殊标记
  ```

- **数据统计**：
  - 老成员认证率
  - 权益保留率
  - 续费转化率

### 2.9 管理后台
- **功能描述**：管理员通过后台管理系统查看和管理用户信息、积分情况、邮箱绑定状态等。
- **管理功能**：
  - 用户管理：查看和管理用户信息、积分、付费状态等。
  - 群组管理：管理用户群组/频道的权限。
  - 积分管理：管理用户积分，调整商城商品及兑换比例。
  - 日志管理：记录所有重要操作，确保数据追溯。

### 2.10 安全性保障
- **功能描述**：确保用户数据和社群操作的安全性。
- **安全措施**：
  - 数据加密：用户邮箱和积分数据加密存储。
  - 防止作弊：设置防作弊机制，限制频繁的签到、积分赠送等行为。
  - 权限控制：管理员和普通用户权限严格区分，防止滥用权限。
  - **具体措施**：
    1. 数据安全：
       - 敏感数据AES加密存储
       - 定期数据备份
       - 访问日志保存90天
    2. 操作安全：
       - 签到间隔限制：24小时
       - 积分转账限额：单次最高1000积分
       - 异常行为检测：连续失败3次自动封禁
    3. 账号安全：
       - 管理员二次验证
       - IP白名单限制
       - 操作审计日志

### 2.11 Bot对群组指令的响应限制
- **功能描述**：Bot只对文字"签到"消息和命令"/zs @成员（赠送积分）"作出响应，其他消息和指令一律不予处理，避免干扰群组交流。
- **规则**：
  - 当群组成员发送"签到"文字时，Bot会自动记录签到并奖励积分。
  - 只有管理员或特定权限的成员可以使用命令"/zs @成员"来赠送积分给其他成员。
  - 任何其他指令或消息（非"签到"或"/zs"）均被忽略，确保群组内消息不受干扰。
- 补充例外情况：管理员例外

### 2.12 个人信息与积分流水
- **功能描述**：用户可以查看个人信息和积分收支明细。

- **查询指令**：
  - `/me` - 查看个人基本信息
  - `/points` - 查看积分余额和流水
  - `/flow [天数]` - 查看指定天数的积分流水，默认7天

- **个人信息展示**：
  ```
  用户信息
  - 用户名：@username
  - 注册时间：YYYY-MM-DD
  - 当前积分：XXX（冻结：XXX）
  - 连续签到：X天
  - 已绑定邮箱：ab***@gmail.com
  - 加入群组：[群组列表]
  ```

- **积分流水查询**：
  1. 概览信息：
     ```
     积分收支概览（最近7天）
     - 总收入：+XXX积分
     - 总支出：-XXX积分
     - 净变动：±XXX积分
     ```
  
  2. 详细记录：
     ```
     积分流水明细
     时间          类型    变动   说明
     MM-DD HH:mm   签到    +10    每日签到
     MM-DD HH:mm   赠送    -100   赠送给@user
     MM-DD HH:mm   收到    +50    来自@user
     MM-DD HH:mm   兑换    -200   兑换商品xxx
     ...
     ```

- **筛选功能**：
  - 按时间范围：`/flow 30` 查看30天内记录
  - 按类型筛选：
    - `/flow in` 仅查看收入
    - `/flow out` 仅查看支出
    - `/flow gift` 仅查看赠送相关

- **导出功能**：
  - `/export 90` 导出最近90天积分流水
  - 支持CSV格式下载
  - 包含完整交易信息

## 3. 系统架构与扩展性

### 3.1 系统架构
- **模块化设计**：功能模块分离，支持后期灵活扩展（如新增功能、语言包、积分规则等）。
- **可扩展性**：系统支持多用户、大规模数据处理，满足社群增长需求。
- **稳定性**：后台系统自动备份数据，确保服务的连续性。

### 3.2 数据库设计
- **用户数据**：存储用户积分、签到记录、邮箱绑定状态、群组/频道权限等信息。
- **安全性**：数据库采用加密技术存储敏感数据，如用户邮箱和积分。
- **补充表结构**：
  - 用户表（user_id, tg_username, email, total_points）
  - 交易表（txn_id, sender, receiver, points, status）
  - 签到表（checkin_id, user_id, streak_days）

### 3.3 API接口
- 提供API接口与其他系统（如支付平台、第三方服务等）对接，支持功能扩展。
- **接口列表**：
  1. 用户相关：
     - `/api/user/info` - 获取用户信息
     - `/api/user/points` - 查询积分余额
     - `/api/user/checkin` - 签到记录
  2. 交易相关：
     - `/api/transaction/transfer` - 积分转账
     - `/api/transaction/history` - 交易记录
  3. 商城相关：
     - `/api/shop/list` - 商品列表
     - `/api/shop/exchange` - 兑换商品
- **调用规范**：
  - 认证方式：Bearer Token
  - 请求格式：JSON
  - 响应格式：统一返回格式

## 4. 管理员操作流程

### 4.1 用户管理
- 查看用户积分、签到状态。
- 添加或取消付费群组权限。
- 审核用户邮箱绑定请求。

### 4.2 群组/频道管理
- 添加/移除用户到付费群组。
- 设置群组访问权限、限制用户行为。

### 4.3 积分管理
- 设置签到奖励、连续签到奖励。
- 调整商城商品的兑换积分。
- 新增管理功能：
  - 批量积分发放/扣除
  - 积分流水追溯（按时间/用户/交易类型过滤）
  - 自动生成积分报表

### 4.4 日志管理
- 记录所有用户操作，确保操作可追溯。

## 5. 用户操作流程

### 5.1 签到操作
1. 用户进入付费群组。
2. 每日点击"签到"按钮，获得积分。
3. 连续签到达到一定天数，自动奖励额外积分。

### 5.2 积分商城兑换
1. 用户点击积分商城按钮。
2. 选择所需商品，点击兑换按钮。
3. 系统检查积分余额，扣除相应积分。
4. 异常情况处理：
   - 商品库存不足：Bot提示"库存不足"，终止兑换
   - 积分余额不足：Bot提示"积分不足"，显示差额
   - 商品已下架：Bot提示"商品已下架"，建议其他选择
   - 抢购失败：Bot提示"抢购失败"，可重试或选择其他商品

### 5.3 邮箱绑定与恢复
1. 用户绑定邮箱。
2. 若Telegram账号被封，用户通过新账号验证邮箱。
3. 管理员审核后，Bot恢复用户的权益并邀请进入付费群组。

## 6. 总结与建议
Coser社群Bot结合了积分管理、邮箱绑定、付费群组管理等多项功能，确保用户体验和社群运营效率。通过增加按钮交互、多语言支持、管理后台和安全保障，Bot可以灵活扩展并满足不同规模社群的需求。

## 新增章节：数据看板
### 6.1 实时监控
- 在线用户数
- 当日签到率
- 积分流通量

### 6.2 统计报表
- 用户增长曲线
- 商品兑换热力图
- 异常操作警报

### 6.3 运营指标
- **用户活跃度**：
  - DAU/MAU比率
  - 用户留存率
  - 签到完成率
- **交易指标**：
  - 日均交易量
  - 积分流通率
  - 商品兑换率
- **异常监控**：
  - 账号异常率
  - 交易失败率
  - 系统响应时间

### 6.4 成员流动统计
- **数据维度**：
  1. 每日统计：
     ```
     日期：YYYY-MM-DD
     新增成员：+XX
     退出成员：-XX
     净增长：±XX
     ```

  2. 每周统计：
     ```
     第XX周（MM-DD至MM-DD）
     - 新增成员：XXX
     - 退出成员：XXX
     - 续费转化：XX%
     ```

  3. 月度报告：
     ```
     YYYY年MM月运营报告
     1. 成员变动：
        - 月初人数：XXXX
        - 月末人数：XXXX
        - 净增长率：XX%
     
     2. 分群数据：
        - 免费群组：新增XXX，转化XX人
        - 付费群组：新增XXX，续费XXX
     ```

- **预警机制**：
  - 单日退出超过XX人自动预警
  - 批量到期预警（未来7天）

- **基础分析**：
  - 用户类型：新用户/老用户
  - 付费等级：免费/付费/VIP
  - 群组分类：按类型统计

## 7. 错误码说明
### 7.1 系统错误码
- 1001：参数错误
- 1002：权限不足
- 1003：操作频率限制
- 1004：系统维护中

### 7.2 业务错误码
- 2001：积分不足
- 2002：商品已下架
- 2003：库存不足
- 2004：账号已被封禁
- 2005：邮箱验证失败

### 群组类型对比

1. **加入方式**
   - 免费群组：
     - 通过公开邀请链接直接加入
     - Bot自动生成公开链接
     - 无积分要求
   
   - 付费群组：
     - 需满足积分要求或付费购买
     - 仅对满足条件用户生成临时邀请链接
     - 支持管理员特殊邀请

2. **权限管理**
   - 免费群组：
     - 基础权限控制
     - 新用户默认禁言24小时
     - 开启防刷屏功能
   
   - 付费群组：
     - 严格的权限控制
     - 定期检查用户资格
     - 到期自动清理
     - 违规自动移除

3. **功能差异**
   - 免费群组：
     - 基础聊天功能
     - 无法使用签到功能
     - 基础Bot命令
   
   - 付费群组：
     - 完整聊天功能
     - 每日签到获得积分
     - 全部Bot功能支持
     - 专属权益和福利

4. **有效期管理**
   - 免费群组：
     - 永久有效
     - 仅违规被移除
   
   - 付费群组：
     - 设置访问有效期
     - 到期需要续费
     - 提前3天提醒到期
     - 过期自动移除

5. **通知机制**
   - 免费群组：
     - 基础欢迎消息
     - 违规警告通知
   
   - 付费群组：
     - 详细的欢迎消息
     - 权限到期提醒
     - 续费通知
     - 违规警告通知

### 多用户支持方案

1. **资源隔离**：
   - 每个社群独立数据库
   - 独立配置文件
   - 分开统计和计费

2. **收费模式**：
   - 基础版：
     - 单社群使用
     - 基础功能（签到、积分）
     - 有用户数量限制
   
   - 专业版：
     - 多社群管理
     - 全部功能
     - 更大用户容量
     - 专属技术支持

3. **资源优化**：
   - 消息队列处理
   - 数据定期归档
   - 缓存机制
   - 按需扩容

4. **使用限制**：
   - 每个社群最大用户数
   - API调用频率限制
   - 存储空间限制
   - 功能使用限制

### Bot克隆授权方案

1. **授权机制**：
   - 主Bot管理员通过命令授权：
     ```
     /authorize <用户ID> <套餐类型> <有效期>
     例如：/authorize 123456789 basic 30
     ```
   - 授权记录存储：
     ```
     授权信息
     - 授权ID：AUTH_XXXXXX
     - 用户ID：123456789
     - 套餐类型：basic/pro
     - 开始时间：YYYY-MM-DD
     - 到期时间：YYYY-MM-DD
     - 状态：active/expired
     ```

2. **克隆流程**：
   1. 获取授权：
      - 用户联系主Bot获取授权
      - 支付授权费用
      - 管理员确认并发放授权码
   
   2. 创建克隆：
      ```
      /clone <授权码> <Bot名称>
      Bot将返回：
      - API Token
      - 配置说明
      - 部署教程
      ```
   
   3. 初始化设置：
      - 配置基本参数
      - 设置管理员
      - 导入群组

3. **套餐类型**：
   - Basic版（适合小型社群）：
     - 最多3个群组
     - 基础功能集
     - 每月1000用户限制
     - 基础技术支持
   
   - Pro版（适合中大型社群）：
     - 无限群组
     - 完整功能集
     - 每月10000用户限制
     - 7*24技术支持

4. **使用限制**：
   - 每个授权码仅可使用一次
   - 到期自动停止服务
   - 不可转让给他人
   - 不可用于非法用途

5. **管理功能**：
   ```
   主Bot管理命令：
   /listauth - 查看所有授权
   /checkauth <授权ID> - 检查授权状态
   /revokeauth <授权ID> - 撤销授权
   /extendauth <授权ID> <天数> - 延长授权
   ```

6. **监控系统**：
   - 克隆Bot状态监控
   - 使用量统计
   - 异常行为检测
   - 定期报告生成

## 8. 技术实现方案

### 8.1 项目结构
```
project/
├── config.py          # 配置文件
├── bot.py             # 主程序
├── database/          # 数据库相关
│   ├── __init__.py
│   ├── models.py      # 数据模型
│   └── db.py          # 数据库操作
├── handlers/          # 命令处理器
│   ├── __init__.py
│   ├── admin.py       # 管理员命令
│   ├── points.py      # 积分相关
│   ├── checkin.py     # 签到系统
│   ├── email.py       # 邮箱绑定与验证
│   └── rights.py      # 权益转移
├── utils/             # 工具函数
│   ├── __init__.py
│   ├── decorators.py  # 权限装饰器
│   └── helpers.py     # 辅助函数
└── requirements.txt   # 依赖包列表
```

### 8.2 数据库设计
```sql
-- 用户表
CREATE TABLE users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    join_date TIMESTAMP,
    points INTEGER DEFAULT 0,
    frozen_points INTEGER DEFAULT 0
);

-- 签到记录表
CREATE TABLE checkins (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    checkin_date DATE,
    points INTEGER,
    streak_days INTEGER,
    bonus_points INTEGER DEFAULT 0,
    checkin_type TEXT DEFAULT 'daily'
);

-- 签到统计表
CREATE TABLE checkin_stats (
    user_id INTEGER PRIMARY KEY,
    total_days INTEGER DEFAULT 0,
    max_streak INTEGER DEFAULT 0,
    last_checkin DATE,
    current_streak INTEGER DEFAULT 0,
    monthly_checkins INTEGER DEFAULT 0,
    total_points INTEGER DEFAULT 0,
    best_month_streak INTEGER DEFAULT 0
);

-- 群组表
CREATE TABLE groups (
    group_id INTEGER PRIMARY KEY,
    group_type TEXT,  -- 'free' or 'paid'
    join_points INTEGER DEFAULT 0,
    expire_days INTEGER DEFAULT 0
);
```

### 8.3 核心功能实现

#### 8.3.1 签到系统
```python
# 签到积分计算
async def calculate_checkin_points(user_id):
    base_points = 10  # 基础签到积分
    bonus_points = 0  # 额外奖励积分
    
    # 获取连续签到天数
    streak_days = await get_streak_days(user_id)
    
    # 计算连续签到奖励
    if streak_days + 1 == 7:  # 第7天
        bonus_points = 20
    elif streak_days + 1 == 30:  # 第30天
        bonus_points = 100
    
    return {
        'base_points': base_points,
        'bonus_points': bonus_points,
        'total_points': base_points + bonus_points,
        'streak_days': streak_days + 1
    }

# 签到消息格式化
async def format_checkin_message(points_info, user_stats):
    msg = [
        "✅ 签到成功！",
        f"➕ 基础积分：{points_info['base_points']}"
    ]
    
    if points_info['bonus_points'] > 0:
        msg.append(f"🎉 连续签到奖励：+{points_info['bonus_points']}")
    
    msg.extend([
        f"📅 当前连续签到：{points_info['streak_days']}天",
        f"📊 本月签到：{user_stats['monthly_checkins']}天",
        f"🏆 最长连续：{user_stats['max_streak']}天",
        f"💰 当前积分：{user_stats['total_points']}"
    ])
    
    return "\n".join(msg)
```

#### 8.3.2 消息管理
```python
# 临时消息发送
async def send_temp_message(update, context, text, delay_range=(30, 60)):
    user_msg = update.message
    bot_msg = await user_msg.reply_text(text)
    
    delay = random.randint(*delay_range)
    context.job_queue.run_once(
        delete_messages,
        delay,
        data={
            'chat_id': update.effective_chat.id,
            'message_ids': [user_msg.message_id, bot_msg.message_id]
        }
    )
```

### 8.4 配置文件
```python
# config.py
BOT_TOKEN = "your_bot_token"
ADMIN_IDS = [123456789]

# 签到配置
CHECKIN_CONFIG = {
    'base_points': 10,
    'bonus_7days': 20,
    'bonus_30days': 100,
    'reset_hour': 0,  # UTC+8
    'reset_minute': 0
}

# 消息清理配置
MESSAGE_CLEANUP = {
    'enabled': True,
    'min_delay': 30,
    'max_delay': 60,
    'commands': ['checkin']
}

# 断签保护配置
CHECKIN_PROTECTION = {
    'enabled': True,
    'protection_points': 500,
    'max_protections': 3,
    'cost_points': 100
}
```

### 8.5 开发阶段规划
1. 第一阶段（1周）：基础框架
   - 项目结构搭建
   - 数据库设计
   - 基础命令实现

2. 第二阶段（2周）：核心功能
   - 签到系统
   - 群组管理
   - 管理员命令

3. 第三阶段（2周）：积分系统
   - 积分互赠
   - 付费群组
   - 个人中心

4. 第四阶段（1周）：邮箱系统
   - 邮箱绑定
   - 权益恢复

5. 第五阶段（2周）：管理后台
   - 用户管理
   - 群组管理
   - 数据查询

### 8.6 依赖包要求
```
python-telegram-bot==20.6
aiosqlite==0.19.0
python-dateutil==2.8.2
aiosmtplib==2.0.1
aio-pika==9.0.5
```

